<fmxmlsnippet type="FMObjectList">
    <CustomFunction id="1" functionArity="2" visible="True" parameters="name;value" name="#">
        <Calculation><![CDATA[// # ( name ; value )
// version 2023-08-29

/*
       Code-independent version of DictItem. Creates a name/value (aka key/value) pair for a SixFriedRice.com-style dictionary. 


HISTORY:
       2023-08-29 ( danshockley ): Updated documentation. 
       2022-12-29 ( danshockley ): Updated documentation. Code reformat. 
       20xx-xx-xx ( xxxxx ): Created. Pulled from SixFriedRice.com blog. 
*/


"<:" 
& Substitute ( 
       name
       ; [ "=" ; "/=" ]
       ; [ ":" ; "/:" ]
       ; [ ">" ; "/>" ] 
       ; [ "<" ; "/<" ] 
       ) 
& ":=" 
& Substitute ( 
       value
       ; [ "=" ; "/=" ]
       ; [ ":" ; "/:" ]
       ; [ ">" ; "/>" ]
       ; [ "<" ; "/<" ] 
       )
& ":>"]]></Calculation>
    </CustomFunction>
    <CustomFunction id="2" functionArity="1" visible="True" parameters="name" name="#P">
        <Calculation><![CDATA[// #P ( name )
// version 2023-08-29

/*
       Code-independent calc that gets a specified key name's value from ScriptParameter when it is a SixFriedRice.com-style dictionary.


HISTORY:
       2023-08-29 ( danshockley ): Updated documentation. 
       2022-12-29 ( danshockley ): Updated documentation. Code reformat. 
       20xx-xx-xx ( xxxxx ): Created. Pulled from SixFriedRice.com blog. 
*/


Let ( [ 
               dict = Get ( ScriptParameter ) 
];

       Let ( [
                       match = 
                               "<:" 
                               & Substitute ( 
                                       name
                                       ; [ "="; "/=" ] 
                                       ; [ ":"; "/:" ] 
                                       ; [ ">"; "/>" ] 
                                       ; [ "<"; "/<" ] 
                                       ) 
                               & ":="
                       ; pstart = Position ( dict ; match ; 1 ; 1 )
                       ; start = pstart + Length ( match )
                       ; end = Position ( dict ; ":>" ; start ; 1 )
                       ; len = If ( end = 0 ; 999999999 ; end - start )
               ];

               If ( pstart = 0
                       ; ""
                       ; Substitute ( 
                               Middle ( dict ; start ; len )
                               ; [ "/:"; ":" ]
                               ; [ "/="; "=" ]
                               ; [ "/>"; ">" ]
                               ; [ "/<"; "<" ] 
                               )
               )
       )
       
)]]></Calculation>
    </CustomFunction>
    <CustomFunction id="3" functionArity="1" visible="True" parameters="name" name="#R">
        <Calculation><![CDATA[// #R ( name )
// version 2023-08-29

/*
       Code-independent calc that gets a specified key name's value from ScriptResult when it is a SixFriedRice.com-style dictionary.


HISTORY:
       2023-08-29 ( danshockley ): Updated documentation. 
       2022-12-29 ( danshockley ): Updated documentation. Code reformat. 
       20xx-xx-xx ( xxxxx ): Created. Pulled from SixFriedRice.com blog. 
*/


Let( [
                 dict = Get ( ScriptResult )
               ; match = 
                       "<:" 
                       & Substitute ( 
                               name 
                               ; [ "="; "/=" ]
                               ; [ ":"; "/:" ]
                               ; [ ">"; "/>" ]
                               ; [ "<"; "/<" ]
                               ) 
                       & ":="
               ; pstart = Position ( dict ; match ; 1 ; 1 )
               ; start = pstart + Length ( match )
               ; end = Position ( dict ; ":>" ; start ; 1 )
               ; len = If( end = 0 ; 999999999 ; end - start )
];
               If ( pstart = 0
                       ; ""
                       ; Substitute ( 
                               Middle ( dict ; start ; len )
                               ; [ "/:"; ":" ]
                               ; [ "/="; "=" ]
                               ; [ "/>"; ">" ]
                               ; [ "/<"; "<" ]
                               )
                       )
)]]></Calculation>
    </CustomFunction>
    <CustomFunction id="4" functionArity="2" visible="True" parameters="dict;name" name="DictContains">
        <Calculation><![CDATA[// DictContains( dict; name )
// version 2023-08-22

/* 
       Simple test for whether a dictionary includes a specified key.


REQUIRES:
       DictEscape


HISTORY: 
       2023-08-22 ( danshockley ): Updated documentation. 
       2016-09-29 ( eshagdar ): Updated documentation.
       201x-xx-xx ( eshagdar ): Reformatted to match newer standards.
       201x-xx-xx ( danshockley ): Use DictEscape instead of hard-coded Substitute within function.
       201x-xx-xx ( danshockley ): Created. Date unknown. 
*/


Let (
       pattern = "<:" & DictEscape ( name ) & ":=";

       Position ( dict ; pattern ; 1 ; 1 ) > 0
)]]></Calculation>
    </CustomFunction>
    <CustomFunction id="5" functionArity="1" visible="True" parameters="input" name="DictEscape">
        <Calculation><![CDATA[// DictEscape ( input )
// version 2023-08-22

/*
       Escapes a string (key or value) so it can be used in a SixFriedRice.com-style dictionary.


HISTORY: 
       2023-08-22 ( danshockley ): Updated documentation. 
       2016-09-29 ( eshagdar ): Updated documentation. 
       201x-xx-xx ( eshagdar ): Reformatted to match newer standards. 
       201x-xx-xx ( xxxxx ): SixFriedRice.com. Date unknown. 
*/


Substitute ( 
       input
       ; [ "="; "/=" ]
       ; [ ":"; "/:" ]
       ; [ ">"; "/>" ]
       ; [ "<"; "/<" ]
)]]></Calculation>
    </CustomFunction>
    <CustomFunction id="6" functionArity="2" visible="True" parameters="dict;name" name="DictGet">
        <Calculation><![CDATA[// DictGet ( dict ; name )
// version 2023-08-29

/* 
       Gets the specified key name's value from a SixFriedRice.com-style dictionary.

HISTORY:
       2023-08-29 ( danshockley ): Updated documentation. Code reformat. Still uses hard-coded escape/unescape so it can stand alone. 
       20xx-xx-xx ( xxxxx ): Created. Pulled from SixFriedRice.com blog. 
*/


Let ( [
               match =
                       "<:" 
                       & Substitute ( 
                               name 
                               ; [ "=" ; "/=" ]
                               ; [ ":" ; "/:" ] 
                               ; [ ">" ; "/>" ]
                               ; [ "<" ; "/<" ]
                               ) 
                       & ":="
               ; pstart = Position ( dict ; match ; 1 ; 1 )
               ; start = pstart + Length ( match )
               ; end = Position ( dict ; ":>" ; start; 1 )
               ; len = If ( end = 0 ; 999999999 ; end - start )
       ];

               If ( pstart = 0
                       ; ""
                       ; Substitute ( 
                               Middle ( dict ; start ; len)
                               ; [ "/:" ; ":" ]
                               ; [ "/=" ; "=" ] 
                               ; [ "/>" ; ">" ] 
                               ; [ "/<" ; "<" ]
                               )
                       )
       )]]></Calculation>
    </CustomFunction>
    <CustomFunction id="7" functionArity="2" visible="True" parameters="name;value" name="DictItem">
        <Calculation><![CDATA[// DictItem ( name ; value )
// version 2023-08-22

/*
       Creates a name/value (aka key/value) pair for a SixFriedRice.com-style dictionary.


REQUIRES:
       DictEscape


HISTORY:
       2023-08-22: Updated documentation. 
       2016-09-29: Updated documentation.
       201x-xx-xx ( xxxxx ): First created. Date unknown. 
*/


"<:" & DictEscape ( name ) & ":=" & DictEscape ( value ) & ":>"]]></Calculation>
    </CustomFunction>
    <CustomFunction id="8" functionArity="2" visible="True" parameters="someValue;someType" name="ValueAsType">
        <Calculation><![CDATA[// ValueAsType ( someValue ; someType )
// version 2023-08-28

/*
       Coerce the value to the specified type. 


HISTORY:
       2023-08-28 ( danshockley ): Updated documentation. 
       2017-01-04 ( eshagdar ): Added documentation. 
       201x-xx-xx ( danshockley ): Created. Date unknown. 
*/


Case ( 
       someType = "Text"
       ; GetAsText ( someValue )
       ; 
       someType = "Number"
       ; GetAsNumber ( someValue )
       ; 
       someType = "Date"
       ; GetAsDate ( someValue )
       ; 
       someType = "Time"
       ; GetAsTime ( someValue )
       ; 
       someType = "Timestamp"
       ; GetAsTimestamp ( someValue )
       ; 
       someValue
       )]]></Calculation>
    </CustomFunction>
</fmxmlsnippet>
